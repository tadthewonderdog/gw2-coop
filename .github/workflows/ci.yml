name: CI

on:
  push:
    branches: [main, develop, github-integration]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

# Security: Restrict permissions
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: .
  PR_NUMBER: ${{ github.event.number || 39 }}
  PREVIEW_URL: "https://pr${{ github.event.number }}-gw2-coop-preview.tadthewonderdog.workers.dev"

jobs:
  create_preview_comment:
    name: Create preview comment for later updating
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request' && github.event.action == 'open'
    steps:
      - name: Create preview comment for later updating
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            üöÄ *Reserved for preview URL
            üìç **URL:** [On Cloudflare](https://pr${{ github.event.number }}-gw2-coop-preview.tadthewonderdog.workers.dev)
          comment_tag: preview_url
          pr-number: ${{ github.event.number}}

  # Security and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: .

      - name: Run security audit
        run: npm audit --audit-level=high
        working-directory: .

      - name: Check for known vulnerabilities
        run: npx better-npm-audit audit --level high
        working-directory: .

  # Code quality and linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: .
      - name: Lint code
        run: npm run lint
        working-directory: .
      - name: Check formatting
        run: npm run format:check
        working-directory: .
      - name: Validate package structure
        run: npm run validate
        working-directory: .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: .
      - name: Type check
        run: npm run type-check
        working-directory: .

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: .
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: .
      - name: Run tests with coverage
        run: npm run test:coverage
        working-directory: .
      - name: Upload coverage reports
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true
      - name: Check coverage threshold
        run: |
          COVERAGE=$(npm run test:coverage --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | head -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 30" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below 30% threshold"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE% meets threshold"
          fi
        working-directory: .

  # Build and artifact creation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security, lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: .
      # - name: Cache GW2 achievement data
      #   run: npm run fetch:gw2-achievement-data
      #   working-directory: .
      - name: Build Preview application
        if: github.event.action != 'closed'
        run: npm run build:preview
        working-directory: .
      - name: Build application
        if: github.ref == 'refs/heads/main' && github.event.action == 'closed'
        run: npm run build
        working-directory: .
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: ./dist
          retention-days: 30
      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Analysis:"
          du -sh dist/
          echo "üìä CSS Analysis:"
          npm run analyze:css 2>/dev/null || echo "CSS analysis not available"
          echo "‚úÖ Build completed successfully"
        working-directory: .

  # Deploy preview for PRs using GitHub Pages
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    # environment:
    #   name: preview
    #   url: https://pr${{ github.event.number }}.wonderdog.win
    permissions:
      contents: read
      pull-requests: write
    concurrency:
      group: "preview-${{ github.event.number }}"
      cancel-in-progress: true
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist
      - name: Getting file list
        run: |
          find .
        working-directory: dist/gw2_coop
      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: npx wrangler versions upload --preview-alias pr${{ github.event.number }}
        working-directory: dist/gw2_coop
        
      - name: Deploy to Cloudflare Workers (Preview)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: 4
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload --preview-alias pr${{ github.event.number }}
          packageManager: npm
          workingDirectory: dist/gw2_coop
        # run: |
        #   npx wrangler upload --preview-alias ${{ github.event.number }}
        #   echo "‚úÖ Build completed successfully"
        # working-directory: .
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            üöÄ **Preview deployed successfully!**
            
            üìç **URL:** [On Cloudflare](https://pr${{ github.event.number }}-gw2-coop-preview.tadthewonderdog.workers.dev)
            
            This preview will be automatically updated when you push new commits to this PR.`
          comment_tag: preview_url
          pr-number: ${{ github.event.number}}
  

  # Production deployment using Cloudflare Workers
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event.action == 'closed'

    # Production deployment to Cloudflare Workers
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist
      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          packageManager: npm
          workingDirectory: .
