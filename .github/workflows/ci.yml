name: CI

on:
  push:
    branches: [main, develop, github-integration]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

# Security: Restrict permissions
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: client
  VITE_USE_GW2_CACHE: true
  VITE_BASE_PATH: /gw2-coop/


jobs:
  # Security and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Run security audit
        run: npm audit --audit-level=high
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Check for known vulnerabilities
        run: npx better-npm-audit audit --level high
        working-directory: ${{ env.WORKING_DIRECTORY }}

  # Code quality and linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Lint code
        run: npm run lint
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Check formatting
        run: npm run format:check
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Validate package structure
        run: npm run validate
        working-directory: ${{ env.WORKING_DIRECTORY }}

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Type check
        run: npm run type-check
        working-directory: ${{ env.WORKING_DIRECTORY }}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Run tests with coverage
        run: npm run test:coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload coverage reports
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          directory: ${{ env.WORKING_DIRECTORY }}/coverage
          fail_ci_if_error: false
          verbose: true
      - name: Check coverage threshold
        run: |
          COVERAGE=$(npm run test:coverage --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | head -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 30" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 30% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold"
          fi
        working-directory: ${{ env.WORKING_DIRECTORY }}

  # Build and artifact creation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security, lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Build application
        run: npm run build
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: ${{ env.WORKING_DIRECTORY }}/dist
          retention-days: 30
      - name: Analyze bundle size
        run: |
          echo "📦 Bundle Analysis:"
          du -sh dist/
          echo "📊 CSS Analysis:"
          npm run analyze:css 2>/dev/null || echo "CSS analysis not available"
          echo "✅ Build completed successfully"
        working-directory: ${{ env.WORKING_DIRECTORY }}

  # Deploy preview for PRs using GitHub Pages
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "preview-${{ github.event.number }}"
      cancel-in-progress: true
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          # path: dist
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

  # # Production deployment
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   environment:
  #     name: production
  #     url: https://your-app.com
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts-${{ github.sha }}
  #         path: dist
  #     - name: Deploy to production
  #       run: |
  #         echo "🚀 Production deployment would happen here"
  #         echo "Deployed to: https://your-app.com"
  #       env:
  #         DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
